plugins {
    id 'idea'
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version '[6.0,6.2)'
    id 'org.parchmentmc.librarian.forgegradle' version '1.+'
    id 'org.spongepowered.mixin' version '0.7.+'
    id 'net.darkhax.curseforgegradle' version '1.+'
    id 'se.bjurr.gitchangelog.git-changelog-gradle-plugin' version '1.71.8'
    id 'com.modrinth.minotaur' version '2.+'
    id 'io.freefair.lombok' version '6.3.0'
}

repositories {
    maven {
        // location of the maven that hosts Mantle and JEI files
        name = 'Progwml6 maven'
        url = 'https://dvs1.progwml6.com/files/maven'
    }
    maven { // TOP
        name 'McJty maven'
        url "https://maven.k-4u.nl"
    }
    maven {
        name = "C4"
        url = "https://maven.theillusivec4.top/"
    }
    flatDir {
        dirs 'libs'
    }
    maven {
        name = "Curse Maven"
        url = "https://cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
    maven {
        name 'tterrag maven'
        url 'https://maven.tterrag.com'
    }
    maven {
        name 'LibX maven'
        url = 'https://maven.melanx.de/'
    }
    maven { url 'https://plugins.gradle.org/m2/' }
    maven { url = 'https://maven.moddingx.org/' }
    maven { // CraftTweaker, Immersive Engineering, JEI
        name 'BlameJared Maven'
        url 'https://maven.blamejared.com'
    }
}

group = 'com.github.wendall911.tcintegrations'
version = "${minecraft_version}-${mod_version}"
archivesBaseName = "${mod_name}"
def mcversion = "${minecraft_version}"
def modid = "${modid}"

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '17'

minecraft {
    mappings channel: "${mappings_channel}", version: "${mappings_version}-${minecraft_version}"

    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file("run").canonicalPath
            property 'forge.logging.console.level', 'debug'

            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

            mods {
                tcintegrations {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
            property 'forge.logging.console.level', 'debug'

            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

            mods {
                tcintegrations {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')
            property 'forge.logging.console.level', 'debug'

            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

            args '--mod', 'tcintegrations',
                    '--all',
                    '--output', file('src/generated/resources/'),
                    '--existing', file('src/main/resources/'),
                    '--existing', file('src/generated/resources')

            mods {
                tcintegrations {
                    source sourceSets.main
                }
            }
        }
    }
}

sourceSets.main.resources {
    srcDir 'src/generated/resources'
}

dependencies {
    implementation 'org.jetbrains:annotations:23.0.0'
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

    implementation fg.deobf("slimeknights.mantle:Mantle:${minecraft_version}-${mantle_version}")
    implementation fg.deobf("slimeknights.tconstruct:TConstruct:${minecraft_version}-${tic_version}")

    compileOnly fg.deobf("mezz.jei:jei-${minecraft_version}-common-api:${jei_version}")
    compileOnly fg.deobf("mezz.jei:jei-${minecraft_version}-forge-api:${jei_version}")
    compileOnly fg.deobf("com.tterrag.registrate:Registrate:${registrate_version}")
    compileOnly fg.deobf("curse.maven:consecration-284001:${consecration_version}")

    implementation fg.deobf("curse.maven:projecte-226410:${projecte_version}")

    implementation fg.deobf(fileTree(dir: 'libs', include: '*.jar'))

    if (System.getenv('DATA_GEN') == null) {

        runtimeOnly fg.deobf("curse.maven:geckolib-388172:${geckolib_version}")
        implementation fg.deobf("curse.maven:arsnouveau-401955:${arsnouveau_version}")
        implementation fg.deobf("curse.maven:iceandfire-264231:${iceandfire_version}")
        implementation fg.deobf("curse.maven:mythicbotany-400058:${mythicbotany_version}")
        implementation fg.deobf("curse.maven:immersiveengineering-231951:${ie_version}")
        implementation fg.deobf("curse.maven:alexsmobs-426558:${alexsmobs_version}")
        implementation fg.deobf("curse.maven:byg-247560:${byg_version}")
        implementation fg.deobf("curse.maven:create-328085:${create_version}")
        implementation fg.deobf("curse.maven:malum-484064:${malum_version}")
        implementation fg.deobf("curse.maven:aquaculture-60028:${aquaculture_version}")
        implementation fg.deobf("curse.maven:undergarden-379849:${undergarden_version}")
        implementation fg.deobf("curse.maven:mekanism-268560:${mekanism_version}")
        implementation fg.deobf("curse.maven:botania-225643:${botania_version}")
        runtimeOnly fg.deobf("curse.maven:mekanism_tools-268567:${mekanism_tools_version}")
        implementation fg.deobf("curse.maven:lodestone-616457:${lodestone_version}")
        runtimeOnly fg.deobf("curse.maven:cyanide-541676:${cyanide_version}")
        runtimeOnly fg.deobf("curse.maven:corgilib-693313:${corgi_version}")
        runtimeOnly fg.deobf("curse.maven:citadel-331936:${citadel_version}")
        runtimeOnly fg.deobf("curse.maven:curios-309927:${curios_version}")
        runtimeOnly fg.deobf("curse.maven:terrablender-563928:${terrablender_version}")
        runtimeOnly fg.deobf("org.moddingx:LibX:${libx_version}") // For MyticBotany
        runtimeOnly fg.deobf('io.github.noeppi_noeppi.mods:SandBox:1.19.2-1.0.1') // For MyticBotany
        // I should probably only have Beyond Earth OR Ad Astra enabled, but it doesn't crash ... yet?
        runtimeOnly fg.deobf("curse.maven:beyond_earth-377448:${beyond_earth_version}")
        runtimeOnly fg.deobf("curse.maven:ad_astra-635042:${ad_astra_version}")
        runtimeOnly fg.deobf("curse.maven:resourceful_lib-570073:${resourceful_lib_version}")
        runtimeOnly fg.deobf("curse.maven:botarium-704113:${botarium_version}")
        runtimeOnly fg.deobf("curse.maven:resourceful_config-714059:${resourceful_config_version}")
        runtimeOnly fg.deobf("mcjty.theoneprobe:theoneprobe:${minecraft_short_version}-${probe_version}") {
            transitive = false
        }
        runtimeOnly fg.deobf("vazkii.patchouli:Patchouli:${patchouli_version}")
        runtimeOnly fg.deobf("mezz.jei:jei-${minecraft_version}-forge:${jei_version}")
        //runtimeOnly fg.deobf("curse.maven:mutant_monsters-852665:4569847")
        //runtimeOnly fg.deobf("curse.maven:puzzles_lib-495476:4600775")
        //runtimeOnly fg.deobf("curse.maven:-:")
    }
    else {
        /*
         * This is strange, but there are a lot of Forge datagen bugs, just stupid workarounds.
         * I see why people like Fabric datagen better, since it doesn't screw up so badly.
         * I'm not entirely sure why datagen subscribers are listened to on other mods :(
         * This seems like an easy fix, like if my mod is running datagen, maybe don't run that
         * shit for other mods?
         */
        compileOnly fg.deobf("curse.maven:arsnouveau-401955:${arsnouveau_version}")
        compileOnly fg.deobf("curse.maven:iceandfire-264231:${iceandfire_version}")
        compileOnly fg.deobf("curse.maven:mythicbotany-400058:${mythicbotany_version}")
        compileOnly fg.deobf("curse.maven:immersiveengineering-231951:${ie_version}")
        compileOnly fg.deobf("curse.maven:alexsmobs-426558:${alexsmobs_version}")
        compileOnly fg.deobf("curse.maven:byg-247560:${byg_version}")
        compileOnly fg.deobf("curse.maven:create-328085:${create_version}")
        compileOnly fg.deobf("curse.maven:malum-484064:${malum_version}")
        compileOnly fg.deobf("curse.maven:aquaculture-60028:${aquaculture_version}")
        compileOnly fg.deobf("curse.maven:undergarden-379849:${undergarden_version}")
        compileOnly fg.deobf("curse.maven:mekanism-268560:${mekanism_version}")
        compileOnly fg.deobf("curse.maven:botania-225643:${botania_version}")
        compileOnly fg.deobf("curse.maven:lodestone-616457:${lodestone_version}")
    }
}

def commonManifest = {
    attributes 'FMLAT': 'tcintegrations_at.cfg'
}

jar {
    manifest {
        attributes([
            "Specification-Title": mod_name,
            "Specification-Vendor": "${mod_author}",
            "Specification-Version": "${archiveVersion}",
            "Implementation-Title": "${mod_name}",
            "Implementation-Version": "${archiveVersion}",
            "Implementation-Vendor" :"${mod_author}",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

def resourceTargets = ['META-INF/mods.toml', 'pack.mcmeta']
def replaceProperties = [ 'version': version,
    'issue_tracker': issue_tracker, 'license': license, 'modid': modid, 'display_name': display_name,
    'description': description, 'display_url': display_url, 'update_url': update_url, 'authors': authors,
    'credits': credits, 'logo_file': logo_file, 'minecraft_version_range': minecraft_version_range,
    'forge_version_range': forge_version_range, "loader_version_range": loader_version_range,
    'malum_minimum_version': malum_minimum_version, 'create_min_version': create_min_version,
    'tic_version_range': tic_version_range
]

processResources {
    duplicatesStrategy(DuplicatesStrategy.FAIL)
    inputs.properties replaceProperties
    exclude '.cache'
    replaceProperties.put 'project', project

    filesMatching(resourceTargets) {
        expand replaceProperties
    }
}

jar.finalizedBy('reobfJar', 'signJar')

def reobfFile = file("$buildDir/reobfJar/output.jar")
def reobfArtifact = artifacts.add('default', reobfFile) {
    type 'jar'
    builtBy 'reobfJar'
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact reobfArtifact
        }
    }
    repositories {
        maven {
            url "file://" + System.getenv("local_maven")
        }
    }
}

def updates = tasks.register("generateUpdates", Copy) {
    it.outputs.upToDateWhen {
        false
    }

    it.from("./files/templates/") {
        include 'updates.json'
        expand 'mod_version': mod_version
    }

    it.into 'files/'
}

def changelogFile = 'build/libs/' + project.getName() + '-' + version + '-changelog.txt'

task changelog(type: se.bjurr.gitchangelog.plugin.gradle.GitChangelogTask) {
    file = new File(changelogFile);
    templateContent = file('files/templates/changelog.mustache').getText('UTF-8');
    fromRepo = file("$projectDir");
    toRef = "HEAD";
    fromRef = "${minecraft_version}-${last_mod_version}";
}

tasks.build.dependsOn('changelog', 'generateUpdates')

